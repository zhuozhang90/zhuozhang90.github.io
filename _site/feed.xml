<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-06-26T11:01:40-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Zhuo/Zhang</title><subtitle>My personal website</subtitle><entry><title type="html">Re-Set Up Jekyll to Host Static Website on GitHub</title><link href="http://localhost:4000/web/jekyll/2019/06/20/github-jekyll-web-re-setup.html" rel="alternate" type="text/html" title="Re-Set Up Jekyll to Host Static Website on GitHub" /><published>2019-06-20T00:00:00-04:00</published><updated>2019-06-20T00:00:00-04:00</updated><id>http://localhost:4000/web/jekyll/2019/06/20/github-jekyll-web-re-setup</id><content type="html" xml:base="http://localhost:4000/web/jekyll/2019/06/20/github-jekyll-web-re-setup.html">&lt;p&gt;I’ve been wanting to set up a personal website for a while and I ended up choosing GitHub instead of WordPress for hosting my static website. One of the main reasons I decided to use GitHub is because it supports uploading blog posts in MarkDown and it just makes it easier and more portable in case I want to keep a copy of everything I post.&lt;/p&gt;

&lt;p&gt;GitHub uses Jekyll to compile the pages from md to html and I have had to set up Jekyll more than a few times since I upgraded my system every few months. There’re some tricky parts of setting up Ruby and Jekyll after the initial project set up so I’m going to walk through setting up the environment for non-first time use.&lt;/p&gt;

&lt;p&gt;Normally what happens to me is that when I reinstall or upgrade my system, I’ll have to reconfigure my environment for ruby and jekyll. To say this not without a hint of shame, I reinstall my system way too much. Not even just distro-hopping. When things get too messed up sometimes it’s just easier to start from a clean slate. I generally try to use virtual machines and virtual environments (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;pipenv&lt;/code&gt; for python) it’s still inevitable sometimes.&lt;/p&gt;

&lt;p&gt;So without further ado, this is how I re-setup my environment on currently Manjaro Linux for jekyll-backed static website.&lt;/p&gt;

&lt;p&gt;Make sure that this is not the first time setting up the environment for the website as we need the &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; to exist in the directory. If not follow the official tutorial.&lt;/p&gt;

&lt;h3 id=&quot;install-ruby-and-bundler&quot;&gt;Install Ruby and bundler&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Sudo Pacman &lt;span class=&quot;nt&quot;&gt;-Syu&lt;/span&gt; ruby
gem install bundler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then ruby’s gonna tell you your gem executables directory is not in your &lt;code class=&quot;highlighter-rouge&quot;&gt;$PATH&lt;/code&gt;, with something like &lt;code class=&quot;highlighter-rouge&quot;&gt;WARNING:  You don't have ~/.gem/ruby/2.6.0/bin in your PATH, gem executables will not run.&lt;/code&gt; so now we just need to add it.&lt;/p&gt;

&lt;h3 id=&quot;add-gem-executables-to-path&quot;&gt;Add Gem Executables to PATH&lt;/h3&gt;

&lt;p&gt;Best way I found is to simply add it to your &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.profile&lt;/code&gt; file if you are using bash.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vim ~/.profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;then add the line &lt;code class=&quot;highlighter-rouge&quot;&gt;export PATH=&quot;$PATH:~/.gem/ruby/2.6/bin&quot;&lt;/code&gt;, you might have to change the version number based on which version of ruby you just installed.&lt;/p&gt;

&lt;p&gt;Then exit out of vim, and we are ready to install the packages.&lt;/p&gt;

&lt;h3 id=&quot;install-packages-with-gem&quot;&gt;Install Packages With Gem&lt;/h3&gt;

&lt;p&gt;Before &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install&lt;/code&gt; we need to configure the &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; first. Simply add &lt;code class=&quot;highlighter-rouge&quot;&gt;gem 'github-pages', group: :jekyll_plugins&lt;/code&gt; right below &lt;code class=&quot;highlighter-rouge&quot;&gt;source 'https://rubygems.org'&lt;/code&gt; (add this one first if not present in the Gemfile already).&lt;/p&gt;

&lt;p&gt;Then simply &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;. If it’s been a while since last time you actually worked on the project and updated the dependencies then it’ll probably fail and bundler’s gonna say it couldn’t find compatible versions or jekyll or something, as the versions listed in our Gemfile.lock is way too old, so we’ll need to &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle update&lt;/code&gt;, which installs the required packages but newer versions. After inputting the password for sudo, the packages will be all set.&lt;/p&gt;

&lt;p&gt;Now simply edit the files then &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll build&lt;/code&gt; to build the website and &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt; to serve on local machine.&lt;/p&gt;</content><author><name></name></author><summary type="html">I’ve been wanting to set up a personal website for a while and I ended up choosing GitHub instead of WordPress for hosting my static website. One of the main reasons I decided to use GitHub is because it supports uploading blog posts in MarkDown and it just makes it easier and more portable in case I want to keep a copy of everything I post.</summary></entry><entry><title type="html">Text Adventure Interpreter in Python - 2</title><link href="http://localhost:4000/python/game/2019/06/16/text-adventure-interpreter-in-python-2.html" rel="alternate" type="text/html" title="Text Adventure Interpreter in Python - 2" /><published>2019-06-16T00:00:00-04:00</published><updated>2019-06-16T00:00:00-04:00</updated><id>http://localhost:4000/python/game/2019/06/16/text-adventure-interpreter-in-python-2</id><content type="html" xml:base="http://localhost:4000/python/game/2019/06/16/text-adventure-interpreter-in-python-2.html">&lt;p&gt;The hope for this week is to set up the basic command line interface and parser for the game file. The game will only be accepting a few commands for navigating (&lt;code class=&quot;highlighter-rouge&quot;&gt;go north, south, east, west&lt;/code&gt;) and interacting with objects (mostly &lt;code class=&quot;highlighter-rouge&quot;&gt;pick up&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;use&lt;/code&gt; items). The game file will be structured as a JSON file indicating the map, the description of different rooms, as well as which objects are to be interacted with.&lt;/p&gt;

&lt;h3 id=&quot;0-the-project-structure&quot;&gt;0. The Project Structure&lt;/h3&gt;

&lt;p&gt;The project structure is going to be relatively simple. The entry point of the program will be a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;taip.py&lt;/code&gt;, which is just&lt;/p&gt;

&lt;h3 id=&quot;1-the-command-line&quot;&gt;1. The Command Line&lt;/h3&gt;

&lt;p&gt;The command line handles user inputs and is essentially a very simple prompt that takes commands and manipulates the internal representation of the game and its status accordingly. it’s very easy to start the interface and also since the limited number of commands we need to implement, it’s relatively easy to write.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;starting the prompt: &lt;code class=&quot;highlighter-rouge&quot;&gt;command.py&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hey&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">The hope for this week is to set up the basic command line interface and parser for the game file. The game will only be accepting a few commands for navigating (go north, south, east, west) and interacting with objects (mostly pick up and use items). The game file will be structured as a JSON file indicating the map, the description of different rooms, as well as which objects are to be interacted with.</summary></entry><entry><title type="html">Text Adventure Interpreter in Python - 1</title><link href="http://localhost:4000/python/game/2019/06/09/text-adventure-interpreter-in-python.html" rel="alternate" type="text/html" title="Text Adventure Interpreter in Python - 1" /><published>2019-06-09T00:00:00-04:00</published><updated>2019-06-09T00:00:00-04:00</updated><id>http://localhost:4000/python/game/2019/06/09/text-adventure-interpreter-in-python</id><content type="html" xml:base="http://localhost:4000/python/game/2019/06/09/text-adventure-interpreter-in-python.html">&lt;p&gt;This is a project I’m working on as the final project for one of the classes for school. The idea came from old-school text adventures but this project is not going to be a full-featured interpreter but instead I’ll only implement some basic functionalities like parsing the game file, save/restore, score keeping as well as an optional voice input.&lt;/p&gt;

&lt;p&gt;I have been following Thorsten Ball’s “&lt;a href=&quot;https://interpreterbook.com/&quot;&gt;Interpreter in Go&lt;/a&gt;” book and the chapters about parsing input really made me wonder if I could implement something similar for other text-based tools. My initial thoughts are to do something about natural languages but I guess text adventures can also be seen as natural language based projects.&lt;/p&gt;

&lt;p&gt;Below is a list of components I plan to implement for this interpreter. As I mentioned earlier I’m only going to write the basic components and leave the rest for maybe the future. There are many interpreters for different formats of text adventures that can be found on the &lt;a href=&quot;https://ifdb.tads.org/&quot;&gt;IFDB&lt;/a&gt; website.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;reading game files with a parser&lt;/li&gt;
  &lt;li&gt;internal representation of the game map&lt;/li&gt;
  &lt;li&gt;player navigation in the map&lt;/li&gt;
  &lt;li&gt;object interaction&lt;/li&gt;
  &lt;li&gt;score keeping&lt;/li&gt;
  &lt;li&gt;save/restore with a save file&lt;/li&gt;
  &lt;li&gt;(optional) voice input that parses natural language&lt;/li&gt;
  &lt;li&gt;(optional) test files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since I’ll only have about 9 weeks to finish the project I might not even implement all of the non-optional components like score keeping or save/restore. The point of the whole project is to teach myself how parsers work and data structures. Efficiency is also not a priority as I’ll be using vanilla Python libraries and collections as much as possible and won’t be spending too much time optimizing speed.&lt;/p&gt;

&lt;p&gt;I also plan to make this project as modular as I can if time permits. This will make it easier to expand the project if anyone plans to do so in the future, or if any components can be reused for other projects.&lt;/p&gt;</content><author><name></name></author><summary type="html">This is a project I’m working on as the final project for one of the classes for school. The idea came from old-school text adventures but this project is not going to be a full-featured interpreter but instead I’ll only implement some basic functionalities like parsing the game file, save/restore, score keeping as well as an optional voice input.</summary></entry></feed>